/* File: countpairs_xi_impl.c.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <inttypes.h>
#include <signal.h>
#include <unistd.h>

#include "countpairs_xi_impl_DOUBLE.h" //function proto-type
#include "xi_kernels_DOUBLE.c"

#include "utils.h" //all of the utilities
#include "progressbar.h" //for the progressbar
#include "cpu_features.h" //prototype instrset_detect required for runtime dispatch

#include "cellarray_DOUBLE.h" //definition of struct cellarray*
#include "gridlink_impl_DOUBLE.h"//function proto-type for gridlink

#if defined(_OPENMP)
#include <omp.h>
#endif

int interrupt_status_xi_DOUBLE=EXIT_SUCCESS;

void interrupt_handler_countpairs_xi_DOUBLE(int signo)
{
    fprintf(stderr,"Received signal = `%s' (signo = %d). Aborting \n",strsignal(signo), signo);
    interrupt_status_xi_DOUBLE = EXIT_FAILURE;
}    

xi_func_ptr_DOUBLE xi_driver_DOUBLE(const struct config_options *options)
{
    static xi_func_ptr_DOUBLE function = NULL;
    static isa old_isa=-1;
    if(old_isa == options->instruction_set) {
        return function;
    }
    
    //Seriously this is the declaration for the function pointers...here be dragons.
    xi_func_ptr_DOUBLE allfunctions[] = {
#ifdef __AVX__
      xi_avx_intrinsics_DOUBLE,
#endif			 
#ifdef __SSE4_2__
      xi_sse_intrinsics_DOUBLE,
#endif
      xi_fallback_DOUBLE
    };
    const int num_functions = sizeof(allfunctions)/sizeof(void *);
    const int fallback_offset = num_functions - 1;
#if defined(__AVX__) || defined __SSE4_2__    
    const int highest_isa = instrset_detect();
#endif    
    int curr_offset = 0;
    
    /* Now check if AVX is supported by the CPU */
    int avx_offset = fallback_offset;
#ifdef __AVX__
    avx_offset = highest_isa >= 7 ? curr_offset:fallback_offset;
    curr_offset++;
#endif        
    
    /* Is the SSE function supported at runtime and enabled at compile-time?*/
    int sse_offset = fallback_offset;
#ifdef __SSE4_2__
    sse_offset = highest_isa >= 6 ? curr_offset:fallback_offset;
    curr_offset++;
#endif
    if( curr_offset != fallback_offset) {
      fprintf(stderr,"ERROR: Bug in code (current offset = %d *should equal* fallback function offset = %d)\n",
              curr_offset, fallback_offset);
      return NULL;
    } 
    
    int function_dispatch=0;
    /* Check that cpu supports feature */
    if(options->instruction_set != 0) {
      switch(options->instruction_set) {
      case(AVX):
        function_dispatch=avx_offset;break;
      case(SSE42):function_dispatch=sse_offset;break;
      default:function_dispatch=fallback_offset;break;
      }
    }

    if(function_dispatch >= num_functions) {
      fprintf(stderr,"In %s> ERROR: Could not resolve the correct function.\n Function index = %d must lie between [0, %d)\n",
              __FUNCTION__, function_dispatch, num_functions);
      return NULL;
    }
    function = allfunctions[function_dispatch];
    old_isa = options->instruction_set;

    return function;
}


int countpairs_xi_DOUBLE(const int64_t ND, DOUBLE * restrict X, DOUBLE * restrict Y, DOUBLE * restrict Z,
                         const double boxsize,
                         const int numthreads,
                         const char *binfile,
                         results_countpairs_xi *results,
                         struct config_options *options,
                         struct extra_options *extra)
{
    if(options->float_type != sizeof(DOUBLE)) {
        fprintf(stderr,"ERROR: In %s> Can only handle arrays of size=%zu. Got an array of size = %zu\n",
                __FUNCTION__, sizeof(DOUBLE), options->float_type);
        return EXIT_FAILURE;
    }
    (void) extra;

    struct timeval t0;
    if(options->c_api_timer) {
        gettimeofday(&t0, NULL);
    }

    
#if defined(_OPENMP)
    omp_set_num_threads(numthreads);
#else    
    (void) numthreads;
#endif

    options->periodic = 1;
    options->autocorr = 1;
    options->sort_on_z = 1;

    //How many bins to subdivide rmax into -> affects runtime on O(20-30%) levels.
    //Check with your typical use-case and set appropriately. Values of 1,2 and 3 are
    //all you might need to check.
    int bin_refine_factor=1;

    
    /* setup interrupt handler -> mostly useful during the python execution. 
       Let's Ctrl-C abort the extension  */
    SETUP_INTERRUPT_HANDLERS(interrupt_handler_countpairs_xi_DOUBLE);

    /***********************
     *initializing the  bins
     ************************/
    double *rupp;
    int nbins;
    double rmin,rmax;
    setup_bins(binfile,&rmin,&rmax,&nbins,&rupp);
    if( ! (rmin >= 0.0 && rmax > 0.0 && rmin < rmax && nbins > 0)) {
        fprintf(stderr,"Error: Could not setup with R bins correctly. (rmin = %lf, rmax = %lf, with nbins = %d). Expected non-zero rmin/rmax with rmax > rmin and nbins >=1 \n",
                rmin, rmax, nbins);
        return EXIT_FAILURE;
    }

    /*---Create 3-D lattice--------------------------------------*/
    int nmesh_x=0,nmesh_y=0,nmesh_z=0;
    const DOUBLE xmin = 0.0, xmax=boxsize;
    const DOUBLE ymin = 0.0, ymax=boxsize;
    const DOUBLE zmin = 0.0, zmax=boxsize;

    cellarray_index_particles_DOUBLE *lattice = gridlink_index_particles_DOUBLE(ND, X, Y, Z, xmin, xmax, ymin, ymax, zmin, zmax, rmax, rmax, rmax, bin_refine_factor, bin_refine_factor, bin_refine_factor, &nmesh_x, &nmesh_y, &nmesh_z, options);
    if(lattice == NULL) {
        return EXIT_FAILURE;
    }
    if(nmesh_x <= 10 && nmesh_y <= 10 && nmesh_z <= 10) {
        fprintf(stderr,"%s> gridlink seems inefficient - boosting bin refine factor - should lead to better performance\n",__FUNCTION__);
        bin_refine_factor *=2;
        free_cellarray_index_particles_DOUBLE(lattice, nmesh_x * (int64_t) nmesh_y * nmesh_z);
        lattice = gridlink_index_particles_DOUBLE(ND, X, Y, Z, xmin, xmax, ymin, ymax, zmin, zmax, rmax, rmax, rmax, bin_refine_factor, bin_refine_factor, bin_refine_factor, &nmesh_x, &nmesh_y, &nmesh_z, options);
        if(lattice == NULL) {
            return EXIT_FAILURE;
        }
    }
    const int64_t totncells = (int64_t) nmesh_x * (int64_t) nmesh_y * (int64_t) nmesh_z;

    {
        int status = assign_ngb_cells_index_particles_DOUBLE(lattice, lattice, totncells, bin_refine_factor, bin_refine_factor, bin_refine_factor, nmesh_x, nmesh_y, nmesh_z, boxsize, boxsize, boxsize, options->autocorr, options->periodic);
        if(status != EXIT_SUCCESS) {
            free_cellarray_index_particles_DOUBLE(lattice, totncells);
            free(rupp);
            return status;
        }
    }
    /* runtime dispatch - get the function pointer */
    xi_func_ptr_DOUBLE xi_function_DOUBLE = xi_driver_DOUBLE(options);
    if(xi_function_DOUBLE == NULL) {
        free_cellarray_index_particles_DOUBLE(lattice, totncells);
        free(rupp);
        return EXIT_FAILURE;
    }

    
#if defined(_OPENMP)
    uint64_t **all_npairs = (uint64_t **) matrix_calloc(sizeof(uint64_t), numthreads, nbins);
    DOUBLE **all_ravg = NULL;
    if(options->need_avg_sep) {
        all_ravg = (DOUBLE **) matrix_calloc(sizeof(DOUBLE),numthreads,nbins);
    }
    if(all_npairs == NULL || (options->need_avg_sep && all_ravg == NULL)) {
        free_cellarray_index_particles_DOUBLE(lattice, totncells);
        matrix_free((void **) all_npairs, numthreads);
        if(options->need_avg_sep) {
            matrix_free((void **) all_ravg, numthreads);
        }
        free(rupp);
        return EXIT_FAILURE;
    }
#else
    uint64_t npairs[nbins];
    DOUBLE ravg[nbins];
    for(int i=0; i < nbins;i++) {
        npairs[i] = 0;
        if(options->need_avg_sep) {
            ravg[i] = ZERO;
        }
    }
#endif

    DOUBLE rupp_sqr[nbins];
    for(int i=0; i < nbins;i++) {
        rupp_sqr[i] = rupp[i]*rupp[i];
    }

    /* const DOUBLE pimax = rmax; */
    const DOUBLE sqr_rmax=rupp_sqr[nbins-1];
    const DOUBLE sqr_rmin=rupp_sqr[0];

    int interrupted=0, abort_status = EXIT_SUCCESS;
    int64_t numdone=0;
    if(options->verbose) {
        init_my_progressbar(totncells,&interrupted);
    }

    /*---Loop-over-Data1-particles--------------------*/
#if defined(_OPENMP)
#pragma omp parallel shared(numdone, abort_status, interrupt_status_xi_DOUBLE)
    {
        const int tid = omp_get_thread_num();
        uint64_t npairs[nbins];
        DOUBLE ravg[nbins];
        for(int i=0;i<nbins;i++) {
            npairs[i] = 0;
            if(options->need_avg_sep) {
                ravg[i] = ZERO;
            }
        }
        
#pragma omp for schedule(dynamic) nowait 
#endif
        for(int64_t index1=0;index1<totncells;index1++) {

#if defined(_OPENMP)            
#pragma omp flush (abort_status, interrupt_status_xi_DOUBLE)
#endif
            if(abort_status == EXIT_SUCCESS && interrupt_status_xi_DOUBLE == EXIT_SUCCESS) {
                
                if(options->verbose) {
#if defined(_OPENMP)
                    if (omp_get_thread_num() == 0)
#endif
                        my_progressbar(numdone,&interrupted);
                    
                    
#if defined(_OPENMP)
#pragma omp atomic
#endif
                    numdone++;
                } //verbose

                /* First do the same-cell calculations */
                const cellarray_index_particles_DOUBLE *first  = &(lattice[index1]);
                if(first->nelements == 0) {
                    continue;
                }
                
                DOUBLE *x1 = first->x;
                DOUBLE *y1 = first->y;
                DOUBLE *z1 = first->z;
                const int64_t N1 = first->nelements;
                int same_cell = 1;
                DOUBLE *this_ravg = NULL;
                if(options->need_avg_sep) {
                    this_ravg = ravg;
                }
                int status = xi_function_DOUBLE(x1, y1, z1, N1,
                                                x1, y1, z1, N1, same_cell, 
                                                sqr_rmax, sqr_rmin, nbins, rupp_sqr, rmax,
                                                ZERO, ZERO, ZERO
                                                ,this_ravg
                                                ,npairs);
                /* This actually causes a race condition under OpenMP - but mostly 
                   I care that an error occurred - rather than the exact value of 
                   the error status */
                abort_status |= status;
                
                for(int64_t ngb=0;ngb<first->num_ngb;ngb++){
                    const cellarray_index_particles_DOUBLE *second = first->ngb_cells[ngb];
                    if(second->nelements == 0) {
                        continue;
                    }
                    DOUBLE *x2 = second->x;
                    DOUBLE *y2 = second->y;
                    DOUBLE *z2 = second->z;
                    const int64_t N2 = second->nelements;
                    const DOUBLE off_xwrap = first->xwrap[ngb];
                    const DOUBLE off_ywrap = first->ywrap[ngb];
                    const DOUBLE off_zwrap = first->zwrap[ngb];
                    same_cell = 0;
                    status = xi_function_DOUBLE(x1, y1, z1, N1,
                                                x2, y2, z2, N2, same_cell, 
                                                sqr_rmax, sqr_rmin, nbins, rupp_sqr, rmax,
                                                off_xwrap, off_ywrap, off_zwrap
                                                ,this_ravg
                                                ,npairs);
                    /* This actually causes a race condition under OpenMP - but mostly 
                       I care that an error occurred - rather than the exact value of 
                       the error status */
                    abort_status |= status;
                }//ngb loop
            }//error occurred somewhere in the called functions: abort_status is set
        }//index1 loop

#if defined(_OPENMP)
        for(int j=0;j<nbins;j++) {
            all_npairs[tid][j] = npairs[j];
            if(options->need_avg_sep) {
                all_ravg[tid][j] = ravg[j];
            }
        }
    }//close the omp parallel region
#endif//openmp parallel

    free_cellarray_index_particles_DOUBLE(lattice, totncells);
    if(abort_status != EXIT_SUCCESS || interrupt_status_xi_DOUBLE != EXIT_SUCCESS) {
        /* Cleanup memory here if aborting */
        free(rupp);
#if defined(_OPENMP)      
        matrix_free((void **) all_npairs,numthreads);
        if(options->need_avg_sep) {
            matrix_free((void **) all_ravg, numthreads);
        }
#endif//OpenMP
      return EXIT_FAILURE;
    }

    if(options->verbose) {
        finish_myprogressbar(&interrupted);
    }

#if defined(_OPENMP)
    /* Note that this *NOT* in an OMP parallel region */
    uint64_t npairs[nbins];
    DOUBLE ravg[nbins];
    for(int i=0;i<nbins;i++) {
        npairs[i] = 0;
        if(options->need_avg_sep) {
            ravg[i] = ZERO;
        }
    }

    for(int i=0;i<numthreads;i++) {
        for(int j=0;j<nbins;j++) {
            npairs[j] += all_npairs[i][j];
            if(options->need_avg_sep) {
                ravg[j] += all_ravg[i][j];
            }
        }
    }
    matrix_free((void **) all_npairs,numthreads);
    if(options->need_avg_sep) {
        matrix_free((void **) all_ravg, numthreads);
    }
#endif//OpenMP


    /* I am only doubling the pair-counts to account for the rmin=0.0 
       case. Ideally, I would simply add ND/2 pairs but for odd ND, this
       would result in incorrect output. Easier to simply double all the
       pairs, and add ND to the first valid rp bin. 
     */
    const uint64_t int_fac = 2;
    const DOUBLE dbl_fac = (DOUBLE) 2.0;
    
    for(int i=0;i<nbins;i++) {
        npairs[i] *= int_fac;
        if(options->need_avg_sep) {
            ravg[i] *= dbl_fac;
        }
    }

    /* Is the min. requested separation 0.0 ?*/
    /* The comparison is '<=' rather than '==' only to silence
       the compiler  */
    if(rupp[0] <= 0.0) {
        /* Then, add all the self-pairs. This ensures that 
           a cross-correlation with two identical datasets 
           produces the same result as the auto-correlation  */
        npairs[1] += ND; //npairs[1] contains the first valid bin.
    }

    
    //So the npairs array contains the number of pairs
    //and the ravg array contain the *SUM* of separations
    //Let's divide out ravg by npairs to actually get
    //the mean ravg
    if(options->need_avg_sep) {
        for(int i=0;i<nbins;i++) {
            if(npairs[i] > 0) {
                ravg[i] /= (DOUBLE) npairs[i] ;
            }
        }
    }

    //Pack in the results
    results->nbin = nbins;
    results->npairs = my_malloc(sizeof(*(results->npairs)), nbins);
    results->xi     = my_malloc(sizeof(*(results->xi))  , nbins);
    results->rupp   = my_malloc(sizeof(*(results->rupp))  , nbins);
    results->ravg   = my_malloc(sizeof(*(results->ravg))  , nbins);
    if(results->npairs == NULL || results->rupp == NULL ||
       results->ravg == NULL || results->xi == NULL) {
        free_results_xi(results);
        free(rupp);
        return EXIT_FAILURE;
    }

    const DOUBLE avgweight2 = 1.0, avgweight1 = 1.0;
    const DOUBLE density=avgweight2*ND/(boxsize*boxsize*boxsize);
    const DOUBLE prefac_density=avgweight1*ND*density;

    DOUBLE rlow=0.0 ;
    //The first bin contains junk
    for(int i=0;i<nbins;i++) {
        results->npairs[i] = npairs[i];
        results->rupp[i]   = rupp[i];
        results->ravg[i] = 0.0;
        if(options->need_avg_sep) {
            results->ravg[i] = ravg[i];
        } 
        const DOUBLE weight0 = (DOUBLE) results->npairs[i];
        const DOUBLE vol=4.0/3.0*M_PI*(rupp[i]*rupp[i]*rupp[i]-rlow*rlow*rlow);
        /* compute xi, dividing summed weight by that expected for a random set */
        if(vol > 0.0) {
            const DOUBLE weightrandom = prefac_density*vol;
            if(weightrandom > 0.0) {
                results->xi[i] = (weight0/weightrandom-1.0);
            } else {
                fprintf(stderr,"Weight for randoms = %lf must be positive. \n", weightrandom);
                return EXIT_FAILURE;
            }
        } else {
            results->xi[i] = -2.0;//can not occur ->signals invalid
        }
        rlow=results->rupp[i];
    }
    
    free(rupp);

    /* reset interrupt handlers to default */
    RESET_INTERRUPT_HANDLERS();
    
    if(options->c_api_timer) {
        struct timeval t1;
        gettimeofday(&t1, NULL);
        options->c_api_time = ADD_DIFF_TIME(t0, t1);
    }

    return EXIT_SUCCESS;
}

{
  "name": "Corrfunc",
  "tagline": "Blazing fast correlation functions on the CPU",
  "body": "[![Release](https://img.shields.io/github/release/manodeep/Corrfunc.svg)](https://github.com/manodeep/Corrfunc/releases/latest)\r\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/manodeep/Corrfunc/master/LICENSE)\r\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.48552.svg)](http://dx.doi.org/10.5281/zenodo.48552)\r\n[![Travis Build](https://travis-ci.org/manodeep/Corrfunc.svg?branch=master)](https://travis-ci.org/manodeep/Corrfunc)\r\n[![Issues](https://img.shields.io/github/issues/manodeep/Corrfunc.svg)](https://github.com/manodeep/Corrfunc/issues)\r\n[![Coverity](https://img.shields.io/coverity/scan/6982.svg)](https://scan.coverity.com/projects/manodeep-corrfunc)\r\n\r\n# Description\r\n\r\nThis repo contains a set of codes to measure the following OpenMP parallelized clustering \r\nmeasures in a cosmological box (co-moving XYZ) or on a mock (RA, DEC, CZ). Also, \r\ncontains the associated paper to be published in Astronomy & Computing Journal (at some point). \r\n\r\n# Installation\r\n\r\n## Pre-requisites\r\n1. OpenMP capable compiler like ``icc``, ``gcc`` or ``clang >= 3.7``. If not available, please disable ``USE_OMP`` option option in ``theory.options`` and ``mocks.options``. You might need to ask your sys-admin for system-wide installs of the compiler; if you prefer to install your own then ``conda install gcc`` (MAC/linux) or ``(sudo) port install gcc5`` (on MAC) should work. *Note ``gcc`` on macports defaults to ``gcc48`` and the portfile is currently broken on ``El Capitan``*.\r\n2. ``gsl``. Use either ``conda install -c https://conda.anaconda.org/asmeurer gsl`` (MAC/linux) or ``(sudo) port install gsl`` (MAC) to install ``gsl`` if necessary. \r\n3. ``python >= 2.6`` or ``python>=3.4`` for compiling the C extensions. \r\n4. ``numpy>=1.7`` for compiling the C extensions. \r\n\r\n*If python and/or numpy are not available, then the C extensions will not be compiled*. \r\n\r\n*Default compiler on MAC is set to `clang`, if you want to specify a different compiler, you will have to call `make CC=yourcompiler`*\r\n\r\n## Preferred Method\r\n\r\n```\r\n$ git clone https://github.com/manodeep/Corrfunc/\r\n$ make \r\n$ make install\r\n$ python setup.py install (--user)\r\n$ make tests \r\n```\r\nAssuming you have `gcc` in your ``PATH``, `make` and `make install` should compile and install the C libraries + python extensions within the source directory. If you would like to install the python C extensions in your environment, then ``python setup.py install (--user)`` should be sufficient. \r\n\r\n## Alternative\r\nThe python package is directly installable via ``pip install Corrfunc``. \r\n\r\n## Installation notes\r\n\r\nIf compilation went smoothly, please run ``make tests`` to ensure the code is working correctly. Depending on the hardware and compilation options, the tests might take more than a few minutes. *Note that the tests are exhaustive and not traditional unit tests*. \r\n\r\nWhile I have tried to ensure that the package compiles and runs out of the box, cross-platform compatibility turns out to be incredibly hard. If you run into any issues during compilation and you have all of the pre-requisistes, please see the [FAQ](FAQ) or [email me](mailto:manodeep@gmail.com). Also, feel free to create a new issue with the `Installation` label. \r\n\r\n## Clustering Measures on a Cosmological box\r\n\r\nAll codes that work on cosmological boxes with co-moving positions are located in the \r\n``xi_theory`` directory. The various clustering measures are:\r\n\r\n1. ``xi_of_r`` -- Measures auto/cross-correlations between two boxes. The boxes do not need to be cubes.\r\n\r\n2. ``xi`` -- Measures 3-d auto-correlation in a cubic cosmological box. Assumes PERIODIC boundary conditions.\r\n\r\n3. ``wp`` -- Measures auto 2-d point projected correlation function in a cubic cosmological box. Assumes PERIODIC boundary conditions. \r\n\r\n4. ``xi_rp_pi`` -- Measures the auto/cross correlation function between two boxes. The boxes do not need to be cubes. \r\n\r\n5. ``vpf`` -- Measures the void probability function + counts-in-cells. \r\n\r\n## Clustering measures on a Mock\r\n\r\nAll codes that work on mock catalogs (RA, DEC, CZ) are located in the ``xi_mocks`` directory. The\r\nvarious clustering measures are:\r\n\r\n1. ``DDrppi`` -- The standard auto/cross correlation between two data sets. The outputs, DD, DR and RR\r\ncan be combined using ``wprp`` to produce the Landy-Szalay estimator for $w_p(r_p)$. \r\n\r\n2. ``wtheta`` -- Computes angular correlation function between two data sets. The outputs from \r\n``DDtheta_mocks`` need to be combined with ``wtheta`` to get the full $\\omega(\\theta)$\r\n\r\n3. ``vpf`` -- Computes the void probability function on mocks. \r\n\r\n# Science options\r\n\r\n1. ``PERIODIC`` (ignored in case of wp/xi) -- switches periodic boundary\r\nconditions on/off. Enabled by default. \r\n\r\n2. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp`` bin. Can be\r\na massive performance hit (~ 2.2x in case of wp). Disabled by default.\r\nNeeds code option ``DOUBLE_PREC`` to be enabled as well. For the mocks, \r\n``OUTPUT_RPAVG`` causes only a mild increase in runtime and is enabled by \r\ndefault.\r\n\r\n3. ``OUTPUT_THETAAVG`` -- switches on output of <theta> in each theta bin. \r\nCan be extremely slow (~5x) depending on compiler, and CPU capabilities. \r\nDisabled by default. \r\n\r\n\r\n## Mocks\r\n\r\n1. ``LINK_IN_DEC`` -- creates binning in declination for mocks. Please check that for \r\nyour desired binning in $r_p$/$\\theta$, this binning does not produce incorrect \r\nresults (due to numerical precision). \r\n\r\n2. ``LINK_IN_RA`` -- creates binning in RA once binning in DEC has been enabled. Same \r\nnumerical issues as ``LINK_IN_DEC``\r\n\r\n3. ``FAST_DIVIDE`` --  Divisions are slow but required $DD(r_p,\\pi)$. This Makefile\r\noption (in mocks.options) replaces the divisions to a reciprocal followed by a \r\nNewton-Raphson. The code will run ~20% faster at the expense of some numerical precision. \r\nPlease check that the loss of precision is not important for your use-case. Also, note \r\nthat the mocks tests for $DD(r_p, \\pi)$ *will fail* if you enable ``FAST_DIVIDE``. \r\n\r\n# Running the codes\r\n\r\nThe documentation is lacking currently but I am actively working on it. \r\n\r\n## Using the command-line interface\r\nNavigate to the correct directory. Make sure that the options, set in either ``theory.options`` or ``mocks.options`` in the root directory are what you want. If not, edit those two files (and possibly ``common.mk``), and recompile. Then, you can use the command-line executables in each individual subdirectory corresponding to the clustering measure you are interested in. For example, if you want to compute the full 3-D correlation function, ``\\xi(r)``, then navigate to ``xi_theory/xi`` and run the executable ``xi``. If you run executables without any arguments, the message will you tell you all the required arguments. \r\n\r\n## Calling from C \r\nLook under the ``xi_theory/examples/run_correlations.c`` and ``xi_mocks/examples/run_correlations_mocks.c`` to see examples of calling the C API directly. If you run the executables, ``run_correlations`` and ``run_correlations_mocks``, the output will also show how to call the command-line interface for the various clustering measures. \r\n\r\n## Calling from Python \r\nIf all went well, the codes can be directly called from ``python``. Please see ``Corrfunc/call_correlation_functions.py`` and ``Corrfunc/call_correlation_functions_mocks.py`` for examples on how to use the Python interface. \r\n\r\n# Common Code options for both Mocks and Cosmological Boxes\r\n\r\n1. ``DOUBLE_PREC`` -- does the calculations in double precision. Disabled\r\nby default. \r\n\r\n2. ``USE_AVX`` -- uses the AVX instruction set found in Intel/AMD CPUs >= 2011\r\n(Intel: Sandy Bridge or later; AMD: Bulldozer or later). Enabled by\r\ndefault - code will run much slower if the CPU does not support AVX instructions.\r\nOn Linux, check for \"avx\" in /proc/cpuinfo under flags. If you do not have\r\nAVX, but have a SSE4 system instead, email me - I will send you a copy of\r\nthe code with SSE4 intrinsics. Or, take the relevant SSE code from the public repo at \r\n[pairwise](https://manodeep.github.io/pairwise).\r\n\r\n3. ``USE_OMP`` -- uses OpenMP parallelization. Scaling is great for DD (perfect scaling\r\nup to 12 threads in my tests) and okay (runtime becomes constant ~6-8 threads in\r\nmy tests) for ``DDrppi`` and ``wp``. \r\n\r\n\r\n*Optimization for your architecture*\r\n\r\n1. The values of ``bin_refine_factor`` and/or ``zbin_refine_factor`` in the countpairs_*.c\r\nfiles control the cache-misses, and consequently, the runtime. In my trial-and-error\r\nmethods, I have seen any values larger than 3 are always slower. But some different\r\ncombination of 1/2 for ``(z)bin_refine_factor`` might be faster on your platform. \r\n\r\n2. If you have AVX2/AVX-512/KNC, you will need to rewrite the entire AVX section.\r\n\r\n# Author\r\n\r\nCorrfunc is written/maintained by Manodeep Sinha. Please contact the [author](mailto:manodeep@gmail.com) in\r\ncase of any issues.\r\n\r\n# Citing\r\n\r\nIf you use the code, please cite using the Zenodo DOI. The BibTex entry for the code is  \r\n\r\n```\r\n@misc{manodeep_sinha_2016_48552,\r\n  author       = {Manodeep Sinha},\r\n  title        = {Corrfunc: Corrfunc-0.2.3},\r\n  month        = mar,\r\n  year         = 2016,\r\n  doi          = {10.5281/zenodo.48552},\r\n  url          = {http://dx.doi.org/10.5281/zenodo.48552}\r\n}\r\n```\r\n\r\n# Mailing list\r\n\r\nIf you have questions or comments about the package, please do so on the mailing list:\r\nhttps://groups.google.com/forum/#!forum/corrfunc\r\n\r\n# LICENSE\r\n\r\nCorrfunc is released under the MIT license. Basically, do what you want\r\nwith the code including using it in commercial application.\r\n\r\n# Project URL\r\n\r\n* website (https://manodeep.github.io/Corrfunc/) \r\n* version control (https://github.com/manodeep/Corrfunc)\r\n",
  "google": "UA-53726906-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
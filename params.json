{
  "name": "Corrfunc",
  "tagline": "Blazing fast correlation functions on the CPU",
  "body": "|Release| |MIT licensed| |DOI| |Travis Build| |Issues| |Coverity| |RTD|\r\n\r\nDescription\r\n===========\r\n\r\nThis repo contains a set of codes to measure the following OpenMP\r\nparallelized clustering measures in a cosmological box (co-moving XYZ)\r\nor on a mock (RA, DEC, CZ). Also, contains the associated paper to be\r\npublished in Astronomy & Computing Journal (at some point). Read the\r\ndocumentation on `corrfunc.rtfd.io <http://corrfunc.rtfd.io/>`_.\r\n\r\nWhy Should You Use it\r\n======================\r\n\r\n1. **Fast** All theory pair-counting is at least **2x** faster than all existing public codes. Particularly suited for MCMC. \r\n2. **Python Extensions** Python extensions allow you to do the compute-heavy bits using C while retaining all of the user-friendliness of python. \r\n3. **Modular** The code is written in a modular fashion and is easily extensible to compute arbitrary clustering statistics. \r\n4. **Future-proof** As I get access to newer instruction-sets, the codes will get updated to use the latest and greatest CPU features. \r\n\r\nBenchmark against Existing Codes\r\n================================\r\n\r\nPlease see this\r\n`gist <https://gist.github.com/manodeep/cffd9a5d77510e43ccf0>`__ for\r\nsome benchmarks with current codes. If you have a pair-counter that you would like to compare, please add in a corresponding function and update the timings. \r\n\r\nInstallation\r\n============\r\n\r\nPre-requisites\r\n--------------\r\n\r\n1. ``make >= 3.80``\r\n2. OpenMP capable compiler like ``icc``, ``gcc`` or ``clang >= 3.7``. If\r\n   not available, please disable ``USE_OMP`` option option in\r\n   ``theory.options`` and ``mocks.options``. You might need to ask your\r\n   sys-admin for system-wide installs of the compiler; if you prefer to\r\n   install your own then ``conda install gcc`` (MAC/linux) or\r\n   ``(sudo) port install gcc5`` (on MAC) should work. *Note ``gcc`` on\r\n   macports defaults to ``gcc48`` and the portfile is currently broken\r\n   on ``El Capitan``*.\r\n3. ``gsl``. Use either\r\n   ``conda install -c https://conda.anaconda.org/asmeurer gsl``\r\n   (MAC/linux) or ``(sudo) port install gsl`` (MAC) to install ``gsl``\r\n   if necessary.\r\n4. ``python >= 2.6`` or ``python>=3.4`` for compiling the C extensions.\r\n5. ``numpy>=1.7`` for compiling the C extensions.\r\n\r\n*If python and/or numpy are not available, then the C extensions will\r\nnot be compiled.*\r\n\r\n*Default compiler on MAC is set to* ``clang``, *if you want to specify a\r\ndifferent compiler, you will have to call* ``make CC=yourcompiler``\r\n\r\nPreferred Method\r\n----------------\r\n\r\n::\r\n\r\n    $ git clone https://github.com/manodeep/Corrfunc/\r\n    $ make \r\n    $ make install\r\n    $ python setup.py install (--user)\r\n    $ make tests \r\n\r\nAssuming you have ``gcc`` in your ``PATH``, ``make`` and\r\n``make install`` should compile and install the C libraries + python\r\nextensions within the source directory. If you would like to install the\r\npython C extensions in your environment, then\r\n``python setup.py install (--user)`` should be sufficient. If you are primarily\r\ninterested in the ``python`` interface, you can condense all of the steps\r\nby using ``python setup.py install CC=yourcompiler (--user)`` after ``git clone``.\r\n\r\nAlternative\r\n-----------\r\n\r\nThe python package is directly installable via ``pip install Corrfunc``. However, in that case you will lose the ability to recompile the code according to your needs. Not recommended unless you are desperate (i.e., `email me <mailto:manodeep@gmail.com>`__ if you are having install issues). \r\n\r\nInstallation notes\r\n------------------\r\n\r\nIf compilation went smoothly, please run ``make tests`` to ensure the\r\ncode is working correctly. Depending on the hardware and compilation\r\noptions, the tests might take more than a few minutes. *Note that the\r\ntests are exhaustive and not traditional unit tests*.\r\n\r\nWhile I have tried to ensure that the package compiles and runs out of\r\nthe box, cross-platform compatibility turns out to be incredibly hard.\r\nIf you run into any issues during compilation and you have all of the\r\npre-requisites, please see the `FAQ <FAQ>`__ or `email\r\nme <mailto:manodeep@gmail.com>`__. Also, feel free to create a new issue\r\nwith the ``Installation`` label.\r\n\r\nClustering Measures on a Cosmological box\r\n-----------------------------------------\r\n\r\nAll codes that work on cosmological boxes with co-moving positions are\r\nlocated in the ``xi_theory`` directory. The various clustering measures\r\nare:\r\n\r\n1. ``xi_of_r`` -- Measures auto/cross-correlations between two boxes.\r\n   The boxes do not need to be cubes.\r\n\r\n2. ``xi`` -- Measures 3-d auto-correlation in a cubic cosmological box.\r\n   Assumes PERIODIC boundary conditions.\r\n\r\n3. ``wp`` -- Measures auto 2-d point projected correlation function in a\r\n   cubic cosmological box. Assumes PERIODIC boundary conditions.\r\n\r\n4. ``xi_rp_pi`` -- Measures the auto/cross correlation function between\r\n   two boxes. The boxes do not need to be cubes.\r\n\r\n5. ``vpf`` -- Measures the void probability function + counts-in-cells.\r\n\r\nClustering measures on a Mock\r\n-----------------------------\r\n\r\nAll codes that work on mock catalogs (RA, DEC, CZ) are located in the\r\n``xi_mocks`` directory. The various clustering measures are:\r\n\r\n1. ``DDrppi`` -- The standard auto/cross correlation between two data\r\n   sets. The outputs, DD, DR and RR can be combined using ``wprp`` to\r\n   produce the Landy-Szalay estimator for `wp(rp)`.\r\n\r\n2. ``wtheta`` -- Computes angular correlation function between two data\r\n   sets. The outputs from ``DDtheta_mocks`` need to be combined with\r\n   ``wtheta`` to get the full `\\omega(\\theta)`\r\n\r\n3. ``vpf`` -- Computes the void probability function on mocks.\r\n\r\nScience options\r\n===============\r\n\r\nIf you plan to use the command-line, then you will have to specify the\r\ncode runtime options at compile-time. For theory routines, these options\r\nare in the file ``theory.options`` while for the mocks, these options are\r\nin file ``mocks.options``. \r\n\r\n**Note** All options can be specified at \r\nruntime if you use the python interface or the static libraries. Each one of\r\nthe following ``Makefile`` option has a corresponding entry for the runtime\r\nlibraries. \r\n\r\nTheory (in ``theory.options``)\r\n-------------------------------\r\n\r\n1. ``PERIODIC`` (ignored in case of wp/xi) -- switches periodic boundary\r\n   conditions on/off. Enabled by default.\r\n\r\n2. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp``\r\n   bin. Can be a massive performance hit (~ 2.2x in case of wp).\r\n   Disabled by default. \r\n\r\n3. ``DOUBLE_PREC`` -- switches on calculations in double precision. Disabled\r\n   by default (i.e., calculations are performed in single precision by default).\r\n   \r\nMocks (in ``mocks.options``)\r\n----------------------------\r\n\r\n1. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp``\r\n   bin for ``DDrppi_mocks``. Enabled by default.\r\n\r\n2. ``OUTPUT_THETAAVG`` -- switches on output of in each theta bin. Can\r\n   be extremely slow (~5x) depending on compiler, and CPU capabilities.\r\n   Disabled by default.\r\n\r\n3. ``DOUBLE_PREC`` -- switches on calculations in double precision. Disabled\r\n   by default (i.e., calculations are performed in single precision by default).\r\n   \r\n4. ``LINK_IN_DEC`` -- creates binning in declination for ``DDtheta``. Please\r\n   check that for your desired limits ``\\theta``, this binning does not \r\n   produce incorrect results (due to numerical precision). Generally speaking,\r\n   if your ``\\thetamax`` (the max. ``\\theta`` to consider pairs within) is too\r\n   small (probaly less than 1 degree), then you should check with and without\r\n   this option. Errors are typically sub-percent level. \r\n\r\n5. ``LINK_IN_RA`` -- creates binning in RA once binning in DEC has been\r\n   enabled. Same numerical issues as ``LINK_IN_DEC``\r\n\r\n6. ``FAST_DIVIDE`` -- Disabled by default. Divisions are slow but required\r\n   ``DD(r_p,\\pi)``. Enabling this option, replaces\r\n   the divisions with a reciprocal followed by a Newton-Raphson. The code\r\n   will run ~20% faster at the expense of some numerical precision.\r\n   Please check that the loss of precision is not important for your\r\n   use-case. \r\n\r\n7. ``FAST_ACOS`` -- Relevant only when ``OUTPUT_THETAAVG`` is enabled. Disabled \r\n   by default. An ``arccos`` is required to calculate ``<\\theta>``. In absence of vectorized\r\n   ``arccos`` (intel compiler, ``icc`` provides one via intel Short Vector Math \r\n   Library), this calculation is extremely slow. However, we can approximate\r\n   ``arccos`` using polynomials (with `Remez Algorithm <https://en.wikipedia.org/wiki/Remez_algorithm>`_).\r\n   The approximations are taken from implementations released by `Geometric Tools <http://geometrictools.com/>`_.\r\n   Depending on the level of accuracy desired, this implementation of ``fast acos`` \r\n   can be tweaked in the file `utils/fast_acos.h <utils/fast_acos.h>`__. An alternate, less\r\n   accurate implementation is already present in that file. Please check that the loss of \r\n   precision is not important for your use-case. \r\n\r\n8. ``COMOVING_DIST`` -- Currently there is no support in ``Corrfunc`` for different cosmologies. However, for the\r\n   mocks routines like, ``DDrppi_mocks`` and ``vpf_mocks``, cosmology parameters are required to convert between\r\n   redshift and co-moving distance. Both ``DDrppi_mocks`` and ``vpf_mocks`` expects to receive a ``redshift`` array \r\n   as input; however, with this option enabled, the ``redshift`` array will be assumed to contain already converted\r\n   co-moving distances. So, if you have redshifts and want to use an arbitrary cosmology, then convert the redshifts\r\n   into co-moving distances, enable this option, and pass the co-moving distance array into the routines. \r\n\r\nRunning the codes\r\n=================\r\n\r\nRead the documentation on `corrfunc.rtfd.io <http://corrfunc.rtfd.io/>`_.\r\n\r\n\r\nUsing the command-line interface\r\n--------------------------------\r\n\r\nNavigate to the correct directory. Make sure that the options, set in\r\neither ``theory.options`` or ``mocks.options`` in the root directory are\r\nwhat you want. If not, edit those two files (and possibly\r\n``common.mk``), and recompile. Then, you can use the command-line\r\nexecutables in each individual subdirectory corresponding to the\r\nclustering measure you are interested in. For example, if you want to\r\ncompute the full 3-D correlation function, ``\\xi(r)``, then navigate to\r\n``xi_theory/xi`` and run the executable ``xi``. If you run executables\r\nwithout any arguments, the message will you tell you all the required\r\narguments.\r\n\r\nCalling from C\r\n--------------\r\n\r\nLook under the ``xi_theory/examples/run_correlations.c`` and\r\n``xi_mocks/examples/run_correlations_mocks.c`` to see examples of\r\ncalling the C API directly. If you run the executables,\r\n``run_correlations`` and ``run_correlations_mocks``, the output will\r\nalso show how to call the command-line interface for the various\r\nclustering measures.\r\n\r\nCalling from Python\r\n-------------------\r\n\r\nIf all went well, the codes can be directly called from ``python``.\r\nPlease see ``Corrfunc/call_correlation_functions.py`` and\r\n``Corrfunc/call_correlation_functions_mocks.py`` for examples on how to\r\nuse the C extensions directly. Here are a few examples:\r\n\r\n.. code:: python\r\n\r\n    from __future__ import print_function\r\n    import os.path as path\r\n    import numpy as np\r\n    import Corrfunc\r\n    from Corrfunc._countpairs import countpairs_wp as wp\r\n\r\n    # Setup the problem for wp\r\n    boxsize = 500.0\r\n    pimax = 40.0\r\n    nthreads = 4\r\n\r\n    # Create a fake data-set.\r\n    Npts = 100000\r\n    x = np.float32(np.random.random(Npts))\r\n    y = np.float32(np.random.random(Npts))\r\n    z = np.float32(np.random.random(Npts))\r\n    x *= boxsize\r\n    y *= boxsize\r\n    z *= boxsize\r\n\r\n    # Use a file with histogram bins, containing Nbins pairs of (rmin rmax)\r\n    binfile = path.join(path.dirname(path.abspath(Corrfunc.__file__)), \"../xi_theory/tests/\", \"bins\")\r\n\r\n    # Call wp\r\n    wp_results = wp(boxsize, pimax, nthreads, binfile, x, y, z)\r\n\r\n    # Print the results\r\n    print(\"###########################################\")\r\n    print(\"##   rmin       rmax        wp       npairs\")\r\n    print(\"###########################################\")\r\n    for wp in wp_results:\r\n        print(\"{0:10.4f} {1:10.4f} {2:12.6f} {3:8d}\"\r\n              .format(wp[0], wp[1], wp[3], wp[4]))\r\n                                                        \r\n\r\nCommon Code options for both Mocks and Cosmological Boxes\r\n=========================================================\r\n\r\n1. ``USE_OMP`` -- uses OpenMP parallelization. Scaling is great for DD\r\n   (perfect scaling up to 12 threads in my tests) and okay (runtime\r\n   becomes constant ~6-8 threads in my tests) for ``DDrppi`` and ``wp``.\r\n   Enabled by default. The ``Makefile`` will compare the `CC` variable with\r\n   known OpenMP enabled compilers and set compile options accordingly. \r\n   Set in ``common.mk`` by default. \r\n\r\n*Optimization for your architecture*\r\n\r\n1. The values of ``bin_refine_factor`` and/or ``zbin_refine_factor`` in\r\n   the ``countpairs\\_\\*.c`` files control the cache-misses, and\r\n   consequently, the runtime. In my trial-and-error methods, I have seen\r\n   any values larger than 3 are always slower. But some different\r\n   combination of 1/2 for ``(z)bin_refine_factor`` might be faster on\r\n   your platform.\r\n\r\n2. If you have AVX2/AVX-512/KNC, you will need to add a new kernel within\r\n   the ``*_kernels.c`` and edit the runtime dispatch code to call this new\r\n   kernel. \r\n\r\nAuthor\r\n======\r\n\r\nCorrfunc is written/maintained by Manodeep Sinha. Please contact the\r\n`author <mailto:manodeep@gmail.com>`__ in case of any issues.\r\n\r\nCiting\r\n======\r\n\r\nIf you use the code, please cite using the Zenodo DOI. The BibTex entry\r\nfor the code is\r\n\r\n::\r\n\r\n      @misc{manodeep_sinha_2016_61511,\r\n         author       = {Manodeep Sinha},\r\n         title        = {Corrfunc: Corrfunc-2.0.0},\r\n         month        = sep,\r\n         year         = 2016,\r\n         doi          = {10.5281/zenodo.61511},\r\n         url          = {http://dx.doi.org/10.5281/zenodo.61511}\r\n      }\r\n       \r\nMailing list\r\n============\r\n\r\nIf you have questions or comments about the package, please do so on the\r\nmailing list: https://groups.google.com/forum/#!forum/corrfunc\r\n\r\nLICENSE\r\n=======\r\n\r\nCorrfunc is released under the MIT license. Basically, do what you want\r\nwith the code including using it in commercial application.\r\n\r\nProject URL\r\n===========\r\n\r\n-  website (https://manodeep.github.io/Corrfunc/)\r\n-  documentation (http://corrfunc.rtfd.io/)   \r\n-  version control (https://github.com/manodeep/Corrfunc)\r\n\r\n.. |Release| image:: https://img.shields.io/github/release/manodeep/Corrfunc.svg\r\n   :target: https://github.com/manodeep/Corrfunc/releases/latest\r\n   :alt: Latest Release\r\n.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-blue.svg\r\n   :target: https://raw.githubusercontent.com/manodeep/Corrfunc/master/LICENSE\r\n   :alt: MIT License\r\n.. |DOI| image:: https://zenodo.org/badge/19184/manodeep/Corrfunc.svg\r\n   :target: https://zenodo.org/badge/latestdoi/19184/manodeep/Corrfunc\r\n   :alt: Zenodo DOI\r\n.. |Travis Build| image:: https://travis-ci.org/manodeep/Corrfunc.svg?branch=master\r\n   :target: https://travis-ci.org/manodeep/Corrfunc\r\n   :alt: Build Status\r\n.. |Issues| image:: https://img.shields.io/github/issues/manodeep/Corrfunc.svg\r\n   :target: https://github.com/manodeep/Corrfunc/issues\r\n   :alt: Open Issues\r\n.. |Coverity| image:: https://img.shields.io/coverity/scan/6982.svg\r\n   :target: https://scan.coverity.com/projects/manodeep-corrfunc\r\n   :alt: Code Health\r\n.. |RTD| image:: https://readthedocs.org/projects/corrfunc/badge/?version=master\r\n   :target: http://corrfunc.readthedocs.io/en/master/?badge=master\r\n   :alt: Documentation Status\r\n",
  "google": "UA-53726906-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}